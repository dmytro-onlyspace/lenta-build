var MassiveRealmClient=(()=>{var k=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var O=Object.prototype.hasOwnProperty;var U=(u,e)=>{for(var n in e)k(u,n,{get:e[n],enumerable:!0})},E=(u,e,n,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of I(e))!O.call(u,o)&&o!==n&&k(u,o,{get:()=>e[o],enumerable:!(t=M(e,o))||t.enumerable});return u};var R=u=>E(k({},"__esModule",{value:!0}),u);var V={};U(V,{Client:()=>A});var w=class{constructor(e){this.client=e,this.reset()}reset(){this.schemas={}}addSchema(e,n){this.schemas[e]=n}arrayToNumber(e){let n=e.length<=32?0:BigInt(0);for(let t=0;t<e.length;t++)e[t]&&(n|=(e.length<=32?1:BigInt(1))<<t);return n}numberToArray(e,n){let t=[];for(let o=0;o<n;o++)t.push((e&(n<=32?1:BigInt(1))<<o)!==(n<=32?0:BigInt(0)));return t}create(e,n){try{return this._create(e,n)}catch(t){return this.client.error("MBuffer","Create Bitmask error",t,e,n),null}}_create(e,n){let t=0,o=[];for(let h in n){let l=n[h].name,a=n[h];if(!e.hasOwnProperty(l))continue;if(a.type=="array"){let r=1,d=e[l].length>255?255:e[l].length;for(let m=0;m<d;m++)r+=this.create({value:e[l][m]},[{name:"value",type:a.array_of}]).length;o.push(r),t+=r;continue}else if(a.type.indexOf("model:")===0){let r=this.create(e[l],this.schemas[a.type.substr(6)]).length;o.push(r),t+=r;continue}let c;switch(a.type){case"uint8":case"int8":c=1;break;case"uint16":case"int16":c=2;break;case"uint32":case"int32":c=4;break;case"int64":case"uint64":c=8;break;case"float32":c=4;break;case"float64":c=8;break;case"bitArray8":c=1;break;case"bitArray16":c=2;break;case"bitArray32":c=4;break;case"bitArray64":c=8;break;case"string8":c=1+new TextEncoder("utf-8").encode(e[l]).length;break;case"string8-long":c=2+new TextEncoder("utf-8").encode(e[l]).length;break;case"string16":c=1+new TextEncoder("utf-16").encode(e[l]).length;break;case"string16-long":c=2+new TextEncoder("utf-16").encode(e[l]).length;break;case"buffer":c=1+e[l].length;break;case"buffer-long":c=2+e[l].length;break}o.push(c),t+=c}let s=new ArrayBuffer(t),i=0;return o.forEach((h,l)=>{let a=n[l].name,c=n[l];if(c.type=="array"){let r=e[a].length>255?255:e[a].length;new DataView(s,i,1).setUint8(0,r),i+=1;for(let d=0;d<r;d++){let m=this.create({value:e[a][d]},[{name:"value",type:c.array_of}]);new Uint8Array(s,i,m.length).set(m),i+=m.length}return}else if(c.type.indexOf("model:")===0){let r=this.create(e[a],this.schemas[c.type.substr(6)]);new Uint8Array(s,i,r.length).set(r),i+=r.length;return}switch(c.type){case"uint8":new DataView(s,i,h).setUint8(0,e[a]);break;case"int8":new DataView(s,i,h).setInt8(0,e[a]);break;case"uint16":new DataView(s,i,h).setUint16(0,e[a],!1);break;case"int16":new DataView(s,i,h).setInt16(0,e[a],!1);break;case"uint32":new DataView(s,i,h).setUint32(0,e[a],!1);break;case"int32":new DataView(s,i,h).setInt32(0,e[a],!1);break;case"int64":new DataView(s,i,h).setBigInt64(0,BigInt(e[a]),!1);break;case"uint64":new DataView(s,i,h).setBigUint64(0,BigInt(e[a]),!1);break;case"float32":new DataView(s,i,h).setFloat32(0,e[a],!1);break;case"float64":new DataView(s,i,h).setFloat64(0,e[a],!1);break;case"bitArray8":new DataView(s,i,h).setUint8(0,this.arrayToNumber(e[a]));break;case"bitArray16":new DataView(s,i,h).setUint16(0,this.arrayToNumber(e[a]),!1);break;case"bitArray32":new DataView(s,i,h).setUint32(0,this.arrayToNumber(e[a]),!1);break;case"bitArray64":new DataView(s,i,h).setBigUint64(0,this.arrayToNumber(e[a]),!1);break;case"string8":let r=new TextEncoder("utf-8").encode(e[a]);if(r.length>255)return this.client.error("MBuffer","String8 length exceeds 255",e[a]),null;new DataView(s,i,1).setUint8(0,r.length),new Uint8Array(s,i+1,r.length).set(r);break;case"string8-long":let d=new TextEncoder("utf-8").encode(e[a]);if(d.length>65535)return this.client.error("MBuffer","String16 length exceeds 65535",e[a]),null;new DataView(s,i,2).setUint16(0,d.length,!1),new Uint8Array(s,i+2,d.length).set(d);break;case"string16":let m=new TextEncoder("utf-16").encode(e[a]);if(m.length>255)return this.client.error("MBuffer","String8 length exceeds 255",e[a]),null;new DataView(s,i,1).setUint8(0,m.length),new Uint8Array(s,i+1,m.length).set(m);break;case"string16-long":let g=new TextEncoder("utf-16").encode(e[a]);if(g.length>65535)return this.client.error("MBuffer","String16 length exceeds 65535",e[a]),null;new DataView(s,i,2).setUint16(0,g.length,!1),new Uint8Array(s,i+2,g.length).set(g);break;case"buffer":let f=new Uint8Array(e[a]);if(f.byteLength>255)return this.client.error("MBuffer","Buffer length exceeds 255",e[a]),null;new DataView(s,i,1).setUint8(0,f.byteLength),new Uint8Array(s,i+1,f.byteLength).set(f);break;case"buffer-long":let p=new Uint8Array(e[a]);if(p.byteLength>65535)return this.client.error("MBuffer","Buffer length exceeds 65535",e[a]),null;new DataView(s,i,2).setUint16(0,p.byteLength,!1),new Uint8Array(s,i+2,p.byteLength).set(p);break}i+=h}),new Uint8Array(s)}decode(e,n,t=0,o=0){try{return this._decode(e,n,t,o)}catch(s){return this.client.error("MBuffer","Decode Bitmask error",s,n,e,t,o),null}}_decode(e,n,t=0,o=0,s=!1){let i={},h=0;for(let l in n){let a=n[l].name,c=n[l];if(o>0&&h>=o)break;h++;let r=a;if(c.name&&(r=c.name),c.type=="array"){let d=new DataView(e,t,1).getUint8(0);t+=1,i[r]=[];for(let m=0;m<d;m++){let g=this._decode(e,[{name:"value",type:c.array_of}],t,0,!0);i[r].push(g.data.value),t=g.offset}continue}else if(c.type.indexOf("model:")===0){let d=this._decode(e,this.schemas[c.type.substr(6)],t,0,!0);i[r]=d.data,t=d.offset;continue}switch(c.type){case"uint8":i[r]=new DataView(e,t,1).getUint8(0),t+=1;break;case"int8":i[r]=new DataView(e,t,1).getInt8(0),t+=1;break;case"uint16":i[r]=new DataView(e,t,2).getUint16(0,!1),t+=2;break;case"int16":i[r]=new DataView(e,t,2).getInt16(0,!1),t+=2;break;case"uint32":i[r]=new DataView(e,t,4).getUint32(0,!1),t+=4;break;case"int32":i[r]=new DataView(e,t,4).getInt32(0,!1),t+=4;break;case"int64":i[r]=parseInt(new DataView(e,t,8).getBigInt64(0,!1).toString()),t+=8;break;case"uint64":i[r]=parseInt(new DataView(e,t,8).getBigUint64(0,!1).toString()),t+=8;break;case"float32":i[r]=new DataView(e,t,4).getFloat32(0,!1),t+=4;break;case"float64":i[r]=new DataView(e,t,8).getFloat64(0,!1),t+=8;break;case"bitArray8":i[r]=this.numberToArray(new DataView(e,t,1).getUint8(0),8),t+=1;break;case"bitArray16":i[r]=this.numberToArray(new DataView(e,t,2).getUint16(0,!1),16),t+=2;break;case"bitArray32":i[r]=this.numberToArray(new DataView(e,t,4).getUint32(0,!1),32),t+=4;break;case"bitArray64":i[r]=this.numberToArray(new DataView(e,t,8).getBigUint64(0,!1),64),t+=8;break;case"string8":let d=new DataView(e,t,1).getUint8(0);t+=1,i[r]=new TextDecoder("utf-8").decode(new Uint8Array(e,t,d)),t+=d;break;case"string8-long":let m=new DataView(e,t,2).getUint16(0,!1);t+=2,i[r]=new TextDecoder("utf-8").decode(new Uint8Array(e,t,m)),t+=m;break;case"string16":let g=new DataView(e,t,1).getUint8(0);t+=1,i[r]=new TextDecoder("utf-16").decode(new Uint8Array(e,t,g)),t+=g;break;case"string16-long":let f=new DataView(e,t,2).getUint16(0,!1);t+=2,i[r]=new TextDecoder("utf-16").decode(new Uint8Array(e,t,f)),t+=f;break;case"buffer":let p=new DataView(e,t,1).getUint8(0);t+=1,i[r]=e.slice(t,t+p),t+=p;break;case"buffer-long":let D=new DataView(e,t,2).getUint16(0,!1);t+=2,i[r]=e.slice(t,t+D),t+=D;break}}return s?{data:i,offset:t}:i}};var y=class{constructor(e){this.client=e,this.reset()}reset(){this.in={},this.out={},this._in={},this._out={},this.addInCommand(1,"DATACHANNEL_MESSAGE",[{name:"data",type:"string8-long"}]),this.addInCommand(2,"MULTI_COMMANDS",[{name:"commands",type:"array",array_of:"buffer-long"}]),this.addInCommand(4,"JOIN_ROOM",[{name:"roomAlias",type:"string8"},{name:"roomId",type:"string8"},{name:"isForwarded",type:"uint8"},{name:"config",type:"string8-long"}]),this.addInCommand(5,"LEAVE_ROOM"),this.addInCommand(6,"ROOM_FULL",[{name:"roomAlias",type:"string8"},{name:"roomId",type:"string8"}]),this.addOutCommand(1,"DATACHANNEL_MESSAGE",[{name:"data",type:"string8-long"}]),this.addOutCommand(2,"MULTI_COMMANDS",[{name:"commands",type:"array",array_of:"buffer-long"}]),this.addOutCommand(4,"JOIN_ROOM",[{name:"roomAlias",type:"string8"},{name:"roomId",type:"string8"},{name:"joinParams",type:"bitArray8"}]),this.addOutCommand(5,"JOINED_ROOM",[{name:"roomId",type:"string8"}]),this.addOutCommand(6,"LEAVE_ROOM")}addInCommand(e,n,t=[]){t||(t=[]),t.unshift({name:"commandId",type:"uint8"}),this._in[n]={id:e,params:t},this.in[n]=e}addOutCommand(e,n,t=[]){t||(t=[]),t.unshift({name:"commandId",type:"uint8"}),this._out[n]={id:e,params:t},this.out[n]=e}createBuffer(e,n={}){return this.client.buffer.create({commandId:this._out[e].id,...n},this._out[e].params)}decodeBuffer(e,n){return this.client.buffer.decode(n,this._in[e].params)}};var C=class{constructor(e,n){this.client=e,this.id=null,this.alias=null,this.config={};for(let t in n)n.hasOwnProperty(t)&&(this[t]=n[t]);this.serverCommands={},this._serverCommands={},this.clientCommands={},this._clientCommands={}}init(){if(this.client.buffer.reset(),this.config.clientCommands)for(let e in this.config.clientCommands){let n=this.config.clientCommands[e];this.addClientCommand(n.id,e,n.params)}if(this.config.serverCommands)for(let e in this.config.serverCommands){let n=this.config.serverCommands[e];this.addServerCommand(n.id,e,n.params)}if(this.config.models)for(let e in this.config.models)this.client.buffer.addSchema(e,this.config.models[e].params)}clientCommandName(e){return this.clientCommands[e]}addServerCommand(e,n,t){t||(t=[]),this._serverCommands[n]={id:e,params:t},this.serverCommands[e]=n}addClientCommand(e,n,t){t||(t=[]),this._clientCommands[n]={id:e,params:t},this.clientCommands[e]=n}createServerCommandBuffer(e,n={}){let t=this._serverCommands[e];if(!t)throw new Error(`Unknown server command ${e}`);return this.client.buffer.create({commandId:t.id,...n},t.params)}decodeServerCommandBuffer(e,n){return this.client.buffer.decode(n,this._serverCommands[e].params)}createClientCommandBuffer(e,n={}){let t=this._clientCommands[e];if(!t)throw new Error(`Unknown client command ${e}`);return this.client.buffer.create({commandId:t.id,...n},t.params)}decodeClientCommandBuffer(e,n){return this.client.buffer.decode(n,this._clientCommands[e].params)}};var b=class{constructor(e,n){if(this.id=n.id,this.client=e,this.config=n,this.connected=!1,this.peerConnection=null,this.dataChannel=null,this.iceCandidatesQueue=[],!this.config.iceServers.length){console.error("DataChannelTransport: iceServers is empty");return}this.socket=new WebSocket(this.config.url+"?sessionId="+this.client.sessionId),this.socket.binaryType="arraybuffer",this.socket.onmessage=this.onWsMessage.bind(this),this.socket.onopen=this.onWsOpen.bind(this),this.socket.onclose=this.onWsClose.bind(this),this.socket.onerror=this.onWsError.bind(this)}onWsMessage(e){if(new DataView(e.data).getUint8(0)!==this.client.commands.in.DATACHANNEL_MESSAGE){this.client.onTransportMessage(this.id,e.data);return}let o=this.client.commands.decodeBuffer("DATACHANNEL_MESSAGE",e.data),s=JSON.parse(o.data);if(s.type==="answer")this.peerConnection.setRemoteDescription(new RTCSessionDescription(s)).then(()=>{for(;this.iceCandidatesQueue.length>0;){let i=this.iceCandidatesQueue.shift();this.peerConnection.addIceCandidate(i)}}).catch(console.error);else if(s.candidate){let i=new RTCIceCandidate({candidate:s.candidate,sdpMid:s.mid});this.peerConnection.remoteDescription&&this.peerConnection.remoteDescription.type?this.peerConnection.addIceCandidate(i).catch(console.error):this.iceCandidatesQueue.push(i)}this.connected=!0}onWsOpen(e){let n=this.config.iceServers.map(t=>{let o=new URL(t.replace("stun:","https:")),s={urls:`stun:${o.hostname}:${o.port}`};return o.username&&o.password&&(s.username=o.username,s.credentials=o.password),s});this.peerConnection=new RTCPeerConnection({iceServers:n}),this.peerConnection.onicecandidate=t=>{if(t.candidate){let o=this.client.commands.createBuffer("DATACHANNEL_MESSAGE",{data:JSON.stringify({candidate:t.candidate.candidate,mid:t.candidate.sdpMid})});this.socket.send(o)}},this.dataChannel=this.peerConnection.createDataChannel(this.config.channelName,{ordered:!1,maxRetransmits:0}),this.dataChannel.onopen=this.onDcOpen.bind(this),this.dataChannel.onmessage=this.onDcMessage.bind(this),this.peerConnection.createOffer().then(t=>this.peerConnection.setLocalDescription(t)).then(()=>{let t=this.client.commands.createBuffer("DATACHANNEL_MESSAGE",{data:JSON.stringify(this.peerConnection.localDescription)});this.socket.send(t)}).catch(console.error)}onWsClose(e){this.client.onTransportClose(this.id,{byServer:e.code===1500})}onWsError(e){}emitWs(e){this.socket.send(e)}closeWs(){this.socket&&(this.connected=!1,this.socket.close())}closeDC(){this.dataChannel&&(this.connected=!1,this.dataChannel.close())}onDcOpen(e){this.client.onTransportConnect(this.id)}onDcMessage(e){this.client.onTransportMessage(this.id,e.data)}onDcClose(e){this.connected=!1,this.client.onTransportClose(this.id,{byServer:e.code===1500})}onDcError(e){this.client.onTransportError(this.id)}emitDc(e){this.dataChannel.send(e)}emit(e,n){if(!this.connected)throw new Error("Transport is not connected");this.reliable?this.emitWs(e):this.emitDc(e)}close(){this.closeWs(),this.closeDC()}};var T=class{constructor(e,n){this.id=n.id,this.client=e,this.config=n,this.connected=!1,this.socket=new WebSocket(this.config.url+"?sessionId="+this.client.sessionId),this.socket.binaryType="arraybuffer",this.socket.onmessage=this.onMessage.bind(this),this.socket.onopen=this.onOpen.bind(this),this.socket.onclose=this.onClose.bind(this),this.socket.onerror=this.onError.bind(this)}onMessage(e){this.client.onTransportMessage(this.id,e.data)}onOpen(e){this.connected=!0,this.client.onTransportConnect(this.id)}onClose(e){this.connected=!1,this.client.onTransportClose(this.id,{byServer:e.code===1500})}onError(e){this.client.onTransportError(this.id)}emit(e,n={}){if(!this.connected)throw new Error("Transport is not connected");this.socket.send(e)}close(){this.socket&&(this.connected=!1,this.socket.close())}};var A=class{constructor(e){this.debug=!1,this.logger=console,this.url=null,this.publicKey=null,this.location=null,this.autoReconnect=!0,this.autoReconnectMaxAttempts=3,this.autoReconnectTimeout=3e3,this.roomConfig={},this.onConnect=()=>{},this.onError=n=>{},this.onDisconnect=()=>{},this.onReconnectAttempt=n=>{},this.onMessage=n=>{},this.onCommand=(n,t={})=>{},this.onJoinRoom=(n,t,o)=>{},this.onRoomFull=(n,t)=>{},this.onLeaveRoom=()=>{};for(let n in e)e.hasOwnProperty(n)&&(this[n]=e[n]);this.connected=!1,this.reconnecting=!1,this.skipReconnect=!1,this.connectAttempt=0,this.config={},this.transports={},this.primaryTransportId=null,this.buffer=new w(this),this.commands=new y(this),this.reconnectTimer=null,this.resetVars()}setRoomConfig(e,n){this.roomConfig[e]=n}resetVars(){this.sessionId=null,this.room=null,this.reconnectTimer&&clearTimeout(this.reconnectTimer)}log(...e){this.debug&&this.logger.log("MR:",...e)}error(...e){this.debug&&this.logger.error("MR:",...e)}planReconnect(){this.skipReconnect||!this.autoReconnect||this.reconnecting||(this.reconnectTimer&&clearTimeout(this.reconnectTimer),this.reconnectTimer=setTimeout(()=>{this.reconnect()},this.autoReconnectTimeout))}reconnect(){if(this.log("Reconnecting (attempt "+this.connectAttempt+")"),this.reconnectTimer&&clearTimeout(this.reconnectTimer),this.connectAttempt>=this.autoReconnectMaxAttempts){this.error("reconnect","Max attempts reached"),this.onDisconnect();return}this.reconnecting=!0,this.connectAttempt++,this.onReconnectAttempt(this.connectAttempt),this.disconnect(),this.reconnecting=!1,this.connect(!0)}connect(e=!1){if(this.log("Connecting..."),e||(this.skipReconnect=!1,this.connectAttempt=0),this.reconnectTimer&&clearTimeout(this.reconnectTimer),!this.url){this.error("connect","url is required");return}if(!this.publicKey){this.error("connect","publicKey is required");return}this.resetVars(),this.fetchConfig().then(n=>{if(!n){this.planReconnect(),this.error("connect","fetchConfig failed");return}this.initConfig(),this.log("Connected")})}async fetchConfig(){this.log("Fetching Config..."),this.config={};try{let e=this.url.replace(/\/+$/,""),n={"Content-Type":"application/json",Authorization:this.publicKey};this.location&&this.location.length==2&&(n["Set-Location"]=this.location,this.log("Connecting to Location",this.location));let t=await fetch(e+"/session/create",{method:"GET",headers:n});if(!t.ok)return this.error("fetchConfig","Bad response status code",t.status),!1;this.config=await t.json(),this.sessionId=this.config.sessionId}catch(e){return this.error("fetchConfig",e),!1}return!0}initConfig(){if(this.config.transports.forEach(e=>{e.primary&&(this.primaryTransportId=e.id)}),!this.primaryTransportId){this.error("initConfig","primaryTransportId is null");return}this.config.transports.forEach(e=>{e.type==="datachannel"?this.transports[e.id]=new b(this,e):e.type==="websocket"&&(this.transports[e.id]=new T(this,e))})}onTransportConnect(e){if(this.primaryTransportId===e)return this.log("Transport:"+e,"Primary Transport Connected"),this.connected=!0,this.onConnect();this.log("Transport:"+e,"Secondary Transport Connected")}onTransportClose(e,n){if(this.log("Transport:"+e,"Closed",n),this.primaryTransportId===e){if(this.reconnectTimer&&clearTimeout(this.reconnectTimer),this.connected=!1,this.reconnecting||this.onDisconnect(),n.byServer){this.skipReconnect=!0;return}this.planReconnect();return}}onTransportMessage(e,n){this.onMessage(n);let t=new DataView(n).getUint8(0);if(t===this.commands.in.JOIN_ROOM){let s=this.commands.decodeBuffer("JOIN_ROOM",n);this.commands.reset();let i={};s.config?(i=JSON.parse(s.config),this.log("Room config fetched",i)):this.roomConfig[s.roomAlias]&&(i=this.roomConfig[s.roomAlias],this.log("Room config was set manually",i)),this.room=new C(this,{id:s.roomId,alias:s.roomAlias,config:i}),this.room.init(),this.log("Joined Room","id:",this.room.id);let h=this.commands.createBuffer("JOINED_ROOM",{roomId:this.room.id});this.emitToPrimaryTransport(h,{reliable:!0}),this.onJoinRoom(s.roomAlias,s.roomId,!!s.isForwarded);return}else if(t==this.commands.in.LEAVE_ROOM){this.onLeaveRoom();return}else if(t==this.commands.in.ROOM_FULL){let s=this.commands.decodeBuffer("ROOM_FULL",n);this.onRoomFull(s.roomAlias,s.roomId);return}if(!this.room)throw new Error("Room is not defined");if(t==this.commands.in.MULTI_COMMANDS){let s=this.commands.decodeBuffer("MULTI_COMMANDS",n);for(let i=0;i<s.commands.length;i++){let h=new DataView(s.commands[i]).getUint8(0),l=this.room.clientCommandName(h);if(l){let a=this.room.decodeClientCommandBuffer(l,s.commands[i]);this.onCommand(l,a)}}return}let o=this.room.clientCommandName(t);if(o){let s=this.room.decodeClientCommandBuffer(o,n);this.onCommand(o,s)}}onTransportError(e){if(this.log("Transport:"+e,"Error"),this.primaryTransportId===e)return this.planReconnect(),this.onError()}emitToPrimaryTransport(e,n={}){this.transports[this.primaryTransportId].emit(e,n)}disconnect(){this.log("Disconnected"),this.reconnecting||(this.skipReconnect=!0);for(let e in this.transports)this.transports[e].close();this.resetVars()}emitMulti(e,n={},t=null){if(!this.connected)throw new Error("Not connected");if(!this.room)return!1;let o=[];for(let i=0;i<e.length;i++){let h=e[i],l=this.room.createServerCommandBuffer(h.command,h.params?h.params:{});l&&o.push(l)}let s=this.commands.createBuffer("MULTI_COMMANDS",{commands:o});return t?this.transports[t].emit(s,n):(this.emitToPrimaryTransport(s,n),!0)}emit(e,n={},t={},o=null){if(!this.connected)throw new Error("Not connected");if(!this.room)return!1;if(Array.isArray(e))return this.emitMulti(e,n,t);n||(n={}),t||(t={});let s=this.room.createServerCommandBuffer(e,n);return s?o?this.transports[o].emit(s,t):(this.emitToPrimaryTransport(s,t),!0):!1}joinRoom(e){if(!this.connected)throw new Error("Not connected");e.alias||(e.alias=""),e.id||(e.id="");let n=[];!this.roomConfig[e.alias]||e.receiveConfig===!0?n.push(1):n.push(0);let t=this.commands.createBuffer("JOIN_ROOM",{roomAlias:e.alias,roomId:e.id,joinParams:n});this.emitToPrimaryTransport(t,{reliable:!0})}leaveRoom(){if(!this.connected)throw new Error("Not connected");this.log("LeaveRoom");let e=this.commands.createBuffer("LEAVE_ROOM");this.emitToPrimaryTransport(e,{reliable:!0}),this.room=null}};return R(V);})();
